//
// Generated by JTB 1.3.2
//

/*
 * 
 *    Author: Soham Tripathy CS20B073
 *    CS3300: Assignment 2
 *    Topic: Semantic Analysis for MiniJava
 * 
 */


package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.

   //keeps track of iteration times
   boolean iteration = true;

   //Sub-typing (gives me the parent of given class)
   Map<String, String> class_name = new HashMap<String, String>();

   //Type Environments (contains type environments)
   HashMap<String, LinkedHashMap<String, String>> type_environments = new HashMap<String, LinkedHashMap<String, String>>();

   //For method types (this gives method's return type)
   HashMap<String, HashMap<String, String>> method_types = new HashMap<String, HashMap<String, String>>();

   //For comparing list arguments (for type checking)
   Vector<String> list_args;
   int to_compare_args;

   //for keeping track of current class - id and methods
   String curr_class;
   String curr_class_id;
   String curr_class_method;

   boolean duplicate = false;

   //Helper Functions

   //getClass Name         -> implemented internally

   //method Name           -> implemented internally

   //distinct              -> implemented internally

   //used to exit out of the program if not type checked correctly
   public void print_error() {
      System.out.println("Type error");
      System.exit(1);
   }

   //method type - gives list of arguments types in order   
   public Vector<String> methodtype(String C, String M) {
      String return_type = method_types.get(C).get(M);

      //code to get arguments for class C method M
      String code = C + M + "@F";

      if(return_type == null) {
         String parent = class_name.get(C);

         if(parent.equals("null")) return null;
         else return methodtype(parent, M);
      }

      Vector<String> method_type_list = new Vector<String>();
      LinkedHashMap<String, String> temp = type_environments.get(code);

      //list with last element being the return type

      for(String key: temp.keySet()) {
         method_type_list.add(temp.get(key));
      }

      method_type_list.add(return_type);

      return method_type_list;
   }

   //no Overloading

   // 0 -> only one declaration in child
   // 1 -> both declaration have same type
   // 2 -> both declaration have different type

   public int noOverloading (String id, String idp, String idm) {
      Vector<String> in_p = methodtype(idp, idm);
      Vector<String> in_c = methodtype(id, idm);

      if(in_p == null) return 0;
      else {
         if(in_p.size() != in_c.size()) return 2;
         else {
            for(int i = 0; i<in_p.size(); i++) {
               if(!in_p.get(i).equals(in_c.get(i))) {
                  return 2;
               }
            }
            return 1;
         }
      }
   }

   //gives type of id in method and class 
   //it checks method var declaration, arguments, class var declaration and parent var declaration respectively
   public String getType(String method, String in_class, String id) {

      LinkedHashMap<String, String> temp;
      String code = in_class + method + "@M";

      temp = type_environments.get(code);

      if(temp.get(id) != null) {
         return temp.get(id);
      }

      code = in_class+method+"@F";

      if(type_environments.get(code).get(id) != null) {
         return type_environments.get(code).get(id);
      }

      String parent = class_name.get(in_class);

      if(type_environments.get(in_class).get(id) != null) {
         return type_environments.get(in_class).get(id);
      } else if(!parent.equals("null")) {
         return getType(method, parent, id);
      }

      return null;
   }

   //matches type a to b
   //reach continues and checks a->parent to b and so on till a has no parent, or match is found
   public boolean reach(String a, String b) {
      if(b == null) System.out.println("in reach func " + b );
      String parent = class_name.get(a);

      if(b.equals(a)) return true;
      else {
         if(parent != "null" && parent != null) {
            return reach(parent, b);
         } else return false;
      }
   }

   //debugging print statements;
   public void print(String s) {
      // System.out.println(s);
   }

   //Checking for inheritance loop

   public boolean checkInheritanceLoop() {
      Set<String> visited = new HashSet<String>();

      for(String C : class_name.keySet()) {
         if(visited.contains(C)) continue;

         visited.add(C);
         String curr = C;
         while(!curr.equals("null")) {
            curr = class_name.get(curr);
            if(curr == null) {
               print("parent doesn't exists");
               print_error();
            }
            if(!visited.contains(curr)) visited.add(curr);
            else {
               if(curr.equals(C)) {
                  return true;
               }
               break;
            }
         }
      }

      return false;
   }
  
	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      if(duplicate) {
         print("Duplicate present");
         print_error();
      }

      if(checkInheritanceLoop()) {
         print("inheritanceLoop present");
         print_error();
      }
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);   
      n.f2.accept(this, argu);

      //setting iteration to false to start type-checking after parsing and making symbol table
      iteration=false;

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      //Linked Hash Map for the var declaration
      LinkedHashMap<String, String> type_env = new LinkedHashMap<String, String>();

      R _ret=null;

      boolean init = iteration;
      iteration = true;

      n.f0.accept(this, argu);

      String name = (String) n.f1.accept(this, argu);
      iteration = init;

      if(iteration) class_name.put(name, "null");

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);

      init = iteration;
      iteration = true;
      n.f11.accept(this, argu);
      iteration = init;

      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);

      if(iteration) type_environments.put(name, type_env);

      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      //creating maps for method storing and var declaration
      LinkedHashMap<String, String> temp = new LinkedHashMap<String, String>();
      HashMap<String, String> temp2 = new HashMap<String, String>();

      R _ret=null;

      boolean init = iteration;
      iteration = true;

      n.f0.accept(this, argu);

      String name = (String) n.f1.accept(this, argu);

      //Checks if same class name is already present
      if(iteration && class_name.containsKey(name)) {
         _ret = null;
         duplicate = true;
      } else if(iteration) {
         class_name.put(name, "null");
      }

      //setting temp variables curr class, var, method respectively
      curr_class = name;
      curr_class_id = name;
      curr_class_method = name;

      iteration = init;

      if(iteration) type_environments.put(name, temp);
      if(iteration) method_types.put(name, temp2);

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      curr_class_id = null;

      n.f4.accept(this, argu);
      curr_class_method = null;

      n.f5.accept(this, argu);

      curr_class = null;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      //creating maps for method storing and var declaration
      LinkedHashMap<String, String> temp = new LinkedHashMap<String, String>();
      HashMap<String, String> temp2 = new HashMap<String, String>();

      boolean init = iteration;
      
      R _ret=null;

      iteration = true;

      n.f0.accept(this, argu);

      String child = (String) n.f1.accept(this, argu);

      n.f2.accept(this, argu);

      String parent = (String) n.f3.accept(this, argu);

      if(iteration && class_name.containsKey(child)) {
         _ret = null;
         duplicate = true;
      } else if(iteration) {
         class_name.put(child, parent);
      }

      n.f4.accept(this, argu);

      curr_class = child;
      curr_class_id = child;
      curr_class_method = child;

      iteration = init;

      if(iteration) type_environments.put(child, temp);
      if(iteration) method_types.put(child, temp2);

      //Storing class variables
      n.f5.accept(this, argu);
      curr_class_id = null;

      //storing methods
      n.f6.accept(this, argu);
      curr_class_method = null;

      //Checking if Parent if not defined 
      if(!iteration && !class_name.containsKey(parent)) {
         print("No valid parent present");
         print_error();
      } else if(!iteration) {

         for(String idm: method_types.get(child).keySet()) {
            if(noOverloading(child, parent, idm) == 2) {
               print("Overloading not correct");
               print_error();
            }
         }
      }

      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      boolean init = iteration;
      iteration = true;
      String type = (String) n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);
      iteration = init;

      if(iteration && curr_class_id != null) {
         HashMap<String, String> tmp = type_environments.get(curr_class_id);
         if(tmp.containsKey(id)) {
            duplicate = true;
         } else {
            tmp.put(id, type);
         }
      }
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      boolean init = iteration;
      iteration = true;

      n.f0.accept(this, argu);

      String type = (String) n.f1.accept(this, argu);
      String id = (String) n.f2.accept(this, argu);
      iteration = init;

      if(iteration && curr_class_method != null) {
         HashMap<String, String> tmp = method_types.get(curr_class_method);
         if(tmp.containsKey(id)) {
            duplicate = true;
         } else {
            tmp.put(id, type);
         }
      }

      n.f3.accept(this, argu);

      String temp_class = curr_class_method;

      //Start Storing Arguments
      LinkedHashMap<String, String> argument = new LinkedHashMap<String, String>();

      //create method name
      curr_class_method = temp_class+id+"@F";

      if(iteration) type_environments.put(curr_class_method, argument);

      n.f4.accept(this, argu);

      //after storing methods restoring back to original state
      curr_class_method = temp_class;

      //Starting to store variables
      temp_class = curr_class_id;

      //create method name for variables
      curr_class_id = curr_class_method+id+"@M";

      n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      //Setting up type_environments for variables in method
      LinkedHashMap<String, String> variables = new LinkedHashMap<String, String>();
      
      if(iteration) type_environments.put(curr_class_id, variables);

      n.f7.accept(this, argu);

      //restoring back after storing variables
      curr_class_id = temp_class;
      curr_class = curr_class_method;
      curr_class_method = id;
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String ret_type = (String) n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);

      if(!iteration) {
         if(!ret_type.equals(type)) {
            print("Return type doesn't match");
            print_error();
         }
      }

      curr_class_method = curr_class;

      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      boolean init = iteration;
      iteration = true;

      String type = (String) n.f0.accept(this, argu);
      String id = (String) n.f1.accept(this, argu);

      iteration = init;

      if(iteration && curr_class_method != null) {
         HashMap<String, String> tmp = type_environments.get(curr_class_method);
         if(tmp.containsKey(id)) {
            duplicate = true;
         } else {
            tmp.put(id, type);
         }
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String s = "int[]";
      _ret = (R) s;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String t1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2  = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(!iteration && !reach(t2, t1)) {
         print("in class " + curr_class);
         print("in method "+ curr_class_method);
         print("this is t2 " + t2);
         print("this is t1 "+t1);
         print("Not valid assignment");
         print_error();
      }  

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      String id = (String) n.f0.accept(this, argu);

      n.f1.accept(this, argu);

      String e1 = (String) n.f2.accept(this, argu);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      String e2 = (String) n.f5.accept(this, argu);

      n.f6.accept(this, argu);

      if(!iteration && id.equals("int[]") && e1.equals("int") && e2.equals("int")) _ret = null;
      else if(!iteration) {
         print("Not int array");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String e = (String) n.f2.accept(this, argu);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(!iteration && !e.equals("boolean")) {
         print("if expression not boolean");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String e = (String) n.f2.accept(this, argu);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      if(!iteration && !e.equals("boolean")) {
         print("if else expression not boolean");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String e = (String) n.f2.accept(this, argu);

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(!iteration && !e.equals("boolean")) {
         print("while expression not boolean");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String e = (String) n.f2.accept(this, argu);
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);

      if(!iteration && !e.equals("int")) {
         print("print expression not int");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String type = (String) n.f0.accept(this, argu);
      
      if(!iteration && to_compare_args > 0) {
         if(reach(type, list_args.get(list_args.size()-1-to_compare_args))) to_compare_args--;
         else {
            print("Arguments not matched");
            print_error();
         }
      }

      _ret = (R) type;

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      String p1 = (String) n.f0.accept(this, argu);

      n.f1.accept(this, argu);

      String p2 = (String) n.f2.accept(this, argu);

      if(!iteration && p1.equals(p2) && p1.equals("boolean")) {
         _ret = (R) p1;
      } else if (!iteration) {
         print("not boolean in and");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      String p1 = (String) n.f0.accept(this, argu);

      n.f1.accept(this, argu);

      String p2 = (String) n.f2.accept(this, argu);

      if(!iteration && p1.equals(p2) && p1.equals("boolean")) {
         _ret = (R) p1;
      } else if (!iteration) {
         print("Not boolean in or");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      String p1 = (String) n.f0.accept(this, argu);

      n.f1.accept(this, argu);

      String p2 = (String) n.f2.accept(this, argu);

      if(!iteration && p1.equals(p2) && p1.equals("int")) {
         _ret = (R) "boolean";
      } else if (!iteration) {
         print("Not int in <=");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      String p1 = (String) n.f0.accept(this, argu);

      n.f1.accept(this, argu);

      String p2 = (String) n.f2.accept(this, argu);

      if(!iteration && p1.equals(p2) && (p1.equals("int") || p1.equals("boolean"))) {
         _ret = (R) "boolean";
      } else if (!iteration) {
         print("Not int or boolean in !=");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String p1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String) n.f2.accept(this, argu);

      if(!iteration && p1.equals(p2) && p1.equals("int")) {

         _ret = (R) "int";

      } else if (!iteration) {
         print("not int in +");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String p1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String) n.f2.accept(this, argu);

      if(!iteration && p1.equals(p2) && p1.equals("int")) {
         _ret = (R) "int";
      } else if (!iteration) {
         print("Not int in -");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String p1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String) n.f2.accept(this, argu);

      if(!iteration && p1.equals(p2) && p1.equals("int")) {
         _ret = (R) "int";
      } else if (!iteration) {
         print("not int int *");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String p1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String) n.f2.accept(this, argu);

      if(!iteration && p1.equals(p2) && p1.equals("int")) {
         _ret = (R) "int";
      } else if (!iteration) {
         print("not int in /");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String p1 = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String p2 = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      if(!iteration && p1.equals("int[]") && p2.equals("int")) {
         _ret = (R) "int";
      } else if (!iteration) {
         print("array lookup not int[] or int");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      String p = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      if(!iteration && p.equals("int[]")) {
         _ret = (R) "int";
      } else if(!iteration) {
         print("not int in length");
         print_error();
      }

      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      boolean init = iteration;
      String class_object = (String) n.f0.accept(this, argu);
      iteration = true;

      n.f1.accept(this, argu);
      String class_method = (String) n.f2.accept(this, argu);
      iteration = init;

      if(!iteration && !class_name.containsKey(class_object)) {
         print("No class matched in message send");
         print_error();
      }

      if(!iteration) {
         list_args = methodtype(class_object, class_method);
         if(list_args == null) {
            print("No method declared for the call");
            print_error();
         }
         to_compare_args = list_args.size()-1;
      }

      Vector<String> temp = list_args;

      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      list_args = temp;

      if(!iteration && to_compare_args == 0) {
         print(list_args.lastElement());
         _ret = (R) list_args.lastElement();
      } else if(!iteration) {
         print("fewer arguments in call");
         print_error();
         to_compare_args = 0;
      }

      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      _ret = n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "int";
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) "boolean";
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */
      
      R _ret=null;
      if(iteration) _ret = n.f0.accept(this, argu);
      else {
         String id = (String) n.f0.accept(this, argu);
         _ret = (R) getType(curr_class_method, curr_class, id);
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) curr_class;
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      String type = (String) n.f3.accept(this, argu);

      if(!iteration && type.equals("int")) {
         _ret = (R) "int[]";
      } else if(!iteration) {
         print("array allcation error");
         print_error();
      }

      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;

      boolean init = iteration;
      iteration = true;

      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      iteration = init;

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);

      String type = (String) n.f1.accept(this, argu);

      if(!iteration && type.equals("boolean")) {
         _ret = (R) type;
      } else if(!iteration) {
         print("not expression not boolean");
         print_error();
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
